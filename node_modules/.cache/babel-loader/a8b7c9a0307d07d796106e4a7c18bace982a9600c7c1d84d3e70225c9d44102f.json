{"ast":null,"code":"var _jsxFileName = \"/Users/draskeer/Documents/Cours/JS/poker-game/src/components/SimplePoker.tsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport Card from \"./Card\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SimplePoker = () => {\n  _s();\n  const [playersCards, setPlayersCards] = useState([[], []]);\n  const [showBotCards, setShowBotCards] = useState(false);\n  const [debug, setDebug] = useState(\"\");\n  const [clickedCards, setClickedCards] = useState([]);\n  const cards = [\"C01\", \"C07\", \"C08\", \"C09\", \"C10\", \"CC1J\", \"CC2Q\", \"CC3K\", \"D01\", \"D07\", \"D08\", \"D09\", \"D10\", \"DC1J\", \"DC2Q\", \"DC3K\", \"H01\", \"H07\", \"H08\", \"H09\", \"H10\", \"HC1J\", \"HC2Q\", \"HC3K\", \"S01\", \"S07\", \"S08\", \"S09\", \"S10\", \"SC1J\", \"SC2Q\", \"SC3K\"];\n  useEffect(() => {\n    const shuffledCards = [...cards].sort(() => Math.random() - 0.5);\n    setPlayersCards([shuffledCards.slice(0, 4), shuffledCards.slice(4, 8)]);\n    setClickedCards(new Array(4).fill(false)); // Initialize clickedCards state for 4 player cards\n  }, []);\n  const handleClick = index => {\n    setClickedCards(prev => {\n      const newClickedCards = [...prev];\n      newClickedCards[index] = !newClickedCards[index];\n      return newClickedCards;\n    });\n  };\n  const drawNewCards = () => {\n    const usedCards = [...playersCards[0], ...playersCards[1]];\n    const remainingCards = cards.filter(card => !usedCards.includes(card));\n    const shuffledRemainingCards = [...remainingCards].sort(() => Math.random() - 0.5);\n    const newPlayerCards = playersCards[0].map((card, index) => clickedCards[index] ? card : shuffledRemainingCards.pop() || card);\n    setPlayersCards([newPlayerCards, playersCards[1]]);\n  };\n  const toggleBotCards = () => {\n    setShowBotCards(prev => !prev);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"h-full\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: debug\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex space-x-4 top-8\",\n      children: playersCards[1].map((card, index) => /*#__PURE__*/_jsxDEV(Card, {\n        title: showBotCards ? card : \"back\"\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex space-x-4 bottom-8 mt-10\",\n      children: playersCards[0].map((card, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: () => handleClick(index),\n        className: clickedCards[index] ? \"opacity-50\" : \"\",\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          title: card\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 25\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: toggleBotCards,\n        className: \"mt-4 p-2 bg-blue-500 text-white rounded\",\n        children: \"Toggle Bot Cards\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: drawNewCards,\n        className: \"mt-4 p-2 bg-green-500 text-white rounded\",\n        children: \"Draw\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 9\n  }, this);\n};\n_s(SimplePoker, \"ojjKF3WmGv4Z50jSlgLSteyJ93o=\");\n_c = SimplePoker;\nexport default SimplePoker;\nvar _c;\n$RefreshReg$(_c, \"SimplePoker\");","map":{"version":3,"names":["useEffect","useState","Card","jsxDEV","_jsxDEV","SimplePoker","_s","playersCards","setPlayersCards","showBotCards","setShowBotCards","debug","setDebug","clickedCards","setClickedCards","cards","shuffledCards","sort","Math","random","slice","Array","fill","handleClick","index","prev","newClickedCards","drawNewCards","usedCards","remainingCards","filter","card","includes","shuffledRemainingCards","newPlayerCards","map","pop","toggleBotCards","className","children","fileName","_jsxFileName","lineNumber","columnNumber","title","onClick","_c","$RefreshReg$"],"sources":["/Users/draskeer/Documents/Cours/JS/poker-game/src/components/SimplePoker.tsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport Card from \"./Card\";\n\nconst SimplePoker = () => { \n    const [playersCards, setPlayersCards] = useState<string[][]>([[], []]);\n    const [showBotCards, setShowBotCards] = useState(false);\n    const [debug, setDebug] = useState(\"\");\n    const [clickedCards, setClickedCards] = useState<boolean[]>([]);\n\n    const cards = [\n        \"C01\", \"C07\", \"C08\", \"C09\", \"C10\", \n        \"CC1J\", \"CC2Q\", \"CC3K\", \"D01\", \"D07\", \n        \"D08\", \"D09\", \"D10\", \"DC1J\", \"DC2Q\", \n        \"DC3K\", \"H01\", \"H07\", \"H08\", \"H09\", \n        \"H10\", \"HC1J\", \"HC2Q\", \"HC3K\", \"S01\", \n        \"S07\", \"S08\", \"S09\", \"S10\", \"SC1J\", \n        \"SC2Q\", \"SC3K\"\n    ];\n\n    useEffect(() => {\n        const shuffledCards = [...cards].sort(() => Math.random() - 0.5);\n        setPlayersCards([shuffledCards.slice(0, 4), shuffledCards.slice(4, 8)]);\n        setClickedCards(new Array(4).fill(false)); // Initialize clickedCards state for 4 player cards\n    }, []);\n\n    const handleClick = (index: number) => { \n        setClickedCards(prev => {\n            const newClickedCards = [...prev];\n            newClickedCards[index] = !newClickedCards[index];\n            return newClickedCards;\n        });\n    };\n\n    const drawNewCards = () => {\n        const usedCards = [...playersCards[0], ...playersCards[1]];\n        const remainingCards = cards.filter(card => !usedCards.includes(card));\n        const shuffledRemainingCards = [...remainingCards].sort(() => Math.random() - 0.5);\n        const newPlayerCards = playersCards[0].map((card, index) => (\n            clickedCards[index] ? card : shuffledRemainingCards.pop() || card\n        ));\n        \n        setPlayersCards([newPlayerCards, playersCards[1]]);\n    };\n\n    const toggleBotCards = () => {\n        setShowBotCards(prev => !prev);\n    };\n\n    return (\n        <div className=\"h-full\">\n            <p>{debug}</p>\n\n            <div className=\"flex space-x-4 top-8\">\n                {playersCards[1].map((card, index) => (\n                    <Card key={index} title={showBotCards ? card : \"back\"} />\n                ))}\n            </div>\n\n            <div className=\"flex space-x-4 bottom-8 mt-10\">\n                {playersCards[0].map((card, index) => (\n                    <div \n                        key={index} \n                        onClick={() => handleClick(index)}\n                        className={clickedCards[index] ? \"opacity-50\" : \"\"}\n                    >\n                        <Card title={card} />\n                    </div>\n                ))}\n            </div>\n            <div>\n                <button onClick={toggleBotCards} className=\"mt-4 p-2 bg-blue-500 text-white rounded\">\n                    Toggle Bot Cards\n                </button>\n                <button onClick={drawNewCards} className=\"mt-4 p-2 bg-green-500 text-white rounded\">\n                    Draw\n                </button>\n            </div>\n        </div>\n    );\n};\n\nexport default SimplePoker;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}