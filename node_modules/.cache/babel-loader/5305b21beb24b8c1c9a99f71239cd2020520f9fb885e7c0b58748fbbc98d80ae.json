{"ast":null,"code":"var _jsxFileName = \"/Users/draskeer/Documents/Cours/JS/poker-game/src/components/SimplePoker.tsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport Card from \"./Card\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SimplePoker = () => {\n  _s();\n  const [playersCards, setPlayersCards] = useState([[], []]);\n  const [showBotCards, setShowBotCards] = useState(false);\n  const [clickedCards, setClickedCards] = useState([]);\n  const [drawCount, setDrawCount] = useState(0);\n  const [debug, setDebug] = useState(\"\");\n  const cards = [\"C01\", \"C07\", \"C08\", \"C09\", \"C10\", \"CC1J\", \"CC2Q\", \"CC3K\", \"D01\", \"D07\", \"D08\", \"D09\", \"D10\", \"DC1J\", \"DC2Q\", \"DC3K\", \"H01\", \"H07\", \"H08\", \"H09\", \"H10\", \"HC1J\", \"HC2Q\", \"HC3K\", \"S01\", \"S07\", \"S08\", \"S09\", \"S10\", \"SC1J\", \"SC2Q\", \"SC3K\"];\n  const initializeGame = () => {\n    const shuffledCards = [...cards].sort(() => Math.random() - 0.5);\n    setPlayersCards([shuffledCards.slice(0, 4), shuffledCards.slice(4, 8)]);\n    setClickedCards(new Array(4).fill(false));\n    setDrawCount(0);\n    setDebug(\"\");\n    setShowBotCards(false);\n  };\n  useEffect(() => {\n    initializeGame();\n  }, []);\n  const handleClick = index => {\n    setClickedCards(prev => {\n      const newClickedCards = [...prev];\n      newClickedCards[index] = !newClickedCards[index];\n      return newClickedCards;\n    });\n  };\n  const drawNewCards = () => {\n    if (drawCount >= 3) {\n      toggleBotCards();\n      determineWinner();\n      return;\n    }\n    const usedCards = [...playersCards[0], ...playersCards[1]];\n    const remainingCards = cards.filter(card => !usedCards.includes(card));\n    const shuffledRemainingCards = [...remainingCards].sort(() => Math.random() - 0.5);\n    const newPlayerCards = playersCards[0].map((card, index) => clickedCards[index] ? card : shuffledRemainingCards.pop() || card);\n    setPlayersCards([newPlayerCards, playersCards[1]]);\n    setDrawCount(drawCount + 1);\n  };\n  const toggleBotCards = () => {\n    setShowBotCards(prev => !prev);\n  };\n  const resetGame = () => {\n    initializeGame();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"h-full\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: debug\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex space-x-4 top-8\",\n      children: playersCards[1].map((card, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: determineWinner,\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          title: card,\n          flipped: showBotCards\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 25\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex space-x-4 bottom-8 mt-10\",\n      children: playersCards[0].map((card, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: () => handleClick(index),\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          title: card,\n          flipped: clickedCards[index]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 25\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: toggleBotCards,\n        className: \"mt-4 p-2 mr-10 bg-blue-500 text-white rounded\",\n        children: \"Toggle Bot Cards\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: drawNewCards,\n        className: \"mt-4 p-2 mr-10 bg-green-500 text-white rounded\",\n        children: \"Draw\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: resetGame,\n        className: \"mt-4 p-2 mr-10 bg-purple-500 text-white rounded\",\n        children: \"Rejouer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 9\n  }, this);\n};\n_s(SimplePoker, \"HHMx3Kee8iv1dm3Jgs+jyXQNzik=\");\n_c = SimplePoker;\nexport default SimplePoker;\nvar _c;\n$RefreshReg$(_c, \"SimplePoker\");","map":{"version":3,"names":["useEffect","useState","Card","jsxDEV","_jsxDEV","SimplePoker","_s","playersCards","setPlayersCards","showBotCards","setShowBotCards","clickedCards","setClickedCards","drawCount","setDrawCount","debug","setDebug","cards","initializeGame","shuffledCards","sort","Math","random","slice","Array","fill","handleClick","index","prev","newClickedCards","drawNewCards","toggleBotCards","determineWinner","usedCards","remainingCards","filter","card","includes","shuffledRemainingCards","newPlayerCards","map","pop","resetGame","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","title","flipped","_c","$RefreshReg$"],"sources":["/Users/draskeer/Documents/Cours/JS/poker-game/src/components/SimplePoker.tsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport Card from \"./Card\";\n\nconst SimplePoker = () => {\n    const [playersCards, setPlayersCards] = useState<string[][]>([[], []]);\n    const [showBotCards, setShowBotCards] = useState(false);\n    const [clickedCards, setClickedCards] = useState<boolean[]>([]);\n    const [drawCount, setDrawCount] = useState(0);\n    const [debug, setDebug] = useState(\"\");\n\n    const cards = [\n        \"C01\", \"C07\", \"C08\", \"C09\", \"C10\",\n        \"CC1J\", \"CC2Q\", \"CC3K\", \"D01\", \"D07\",\n        \"D08\", \"D09\", \"D10\", \"DC1J\", \"DC2Q\",\n        \"DC3K\", \"H01\", \"H07\", \"H08\", \"H09\",\n        \"H10\", \"HC1J\", \"HC2Q\", \"HC3K\", \"S01\",\n        \"S07\", \"S08\", \"S09\", \"S10\", \"SC1J\",\n        \"SC2Q\", \"SC3K\"\n    ];\n\n    const initializeGame = () => {\n        const shuffledCards = [...cards].sort(() => Math.random() - 0.5);\n        setPlayersCards([shuffledCards.slice(0, 4), shuffledCards.slice(4, 8)]);\n        setClickedCards(new Array(4).fill(false));\n        setDrawCount(0);\n        setDebug(\"\");\n        setShowBotCards(false);\n    };\n\n    useEffect(() => {\n        initializeGame();\n    }, []);\n\n    const handleClick = (index: number) => {\n        setClickedCards((prev) => {\n            const newClickedCards = [...prev];\n            newClickedCards[index] = !newClickedCards[index];\n            return newClickedCards;\n        });\n    };\n\n    const drawNewCards = () => {\n        if (drawCount >= 3) {\n            toggleBotCards();\n            determineWinner();\n            return;\n        }\n\n        const usedCards = [...playersCards[0], ...playersCards[1]];\n        const remainingCards = cards.filter((card) => !usedCards.includes(card));\n        const shuffledRemainingCards = [...remainingCards].sort(() => Math.random() - 0.5);\n        const newPlayerCards = playersCards[0].map((card, index) =>\n            clickedCards[index] ? card : shuffledRemainingCards.pop() || card\n        );\n\n        setPlayersCards([newPlayerCards, playersCards[1]]);\n        setDrawCount(drawCount + 1);\n    };\n\n    const toggleBotCards = () => {\n        setShowBotCards((prev) => !prev);\n    };\n\n    const resetGame = () => {\n        initializeGame();\n    };\n\n    return (\n        <div className=\"h-full\">\n            <p>{debug}</p>\n\n            <div className=\"flex space-x-4 top-8\">\n                {playersCards[1].map((card, index) => (\n                    <div onClick={determineWinner} key={index}>\n                        <Card title={card} flipped={showBotCards} />\n                    </div>\n                ))}\n            </div>\n\n            <div className=\"flex space-x-4 bottom-8 mt-10\">\n                {playersCards[0].map((card, index) => (\n                    <div key={index} onClick={() => handleClick(index)}>\n                        <Card title={card} flipped={clickedCards[index]} />\n                    </div>\n                ))}\n            </div>\n            <div>\n                <button onClick={toggleBotCards} className=\"mt-4 p-2 mr-10 bg-blue-500 text-white rounded\">\n                    Toggle Bot Cards\n                </button>\n                <button onClick={drawNewCards} className=\"mt-4 p-2 mr-10 bg-green-500 text-white rounded\">\n                    Draw\n                </button>\n                <button onClick={resetGame} className=\"mt-4 p-2 mr-10 bg-purple-500 text-white rounded\">\n                    Rejouer\n                </button>\n            </div>\n        </div>\n    );\n};\n\nexport default SimplePoker;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}