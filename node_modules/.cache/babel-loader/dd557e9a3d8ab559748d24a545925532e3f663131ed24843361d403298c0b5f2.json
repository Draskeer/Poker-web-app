{"ast":null,"code":"var _jsxFileName = \"/Users/draskeer/Documents/Cours/JS/poker-game/src/components/Table.tsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport Card from \"./Card\"; // Assurez-vous que le chemin vers le composant Card est correct\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Table = () => {\n  _s();\n  const cards = [\"C01\", \"C02\", \"C03\", \"C04\", \"C05\", \"C06\", \"C07\", \"C08\", \"C09\", \"C10\", \"CC1J\", \"CC2Q\", \"CC3K\", \"D01\", \"D02\", \"D03\", \"D04\", \"D05\", \"D06\", \"D07\", \"D08\", \"D09\", \"D10\", \"DC1J\", \"DC2Q\", \"DC3K\", \"H01\", \"H02\", \"H03\", \"H04\", \"H05\", \"H06\", \"H07\", \"H08\", \"H09\", \"H10\", \"HC1J\", \"HC2Q\", \"HC3K\", \"S01\", \"S02\", \"S03\", \"S04\", \"S05\", \"S06\", \"S07\", \"S08\", \"S09\", \"S10\", \"SC1J\", \"SC2Q\", \"SC3K\"];\n  const [playerCards, setPlayerCards] = useState([]);\n  const [botCards, setBotCards] = useState([[], [], []]);\n  const [middleCards, setMiddleCards] = useState([]);\n  useEffect(() => {\n    const shuffledCards = [...cards].sort(() => Math.random() - 0.5);\n    setPlayerCards(shuffledCards.slice(0, 2));\n    setBotCards([shuffledCards.slice(2, 4), shuffledCards.slice(4, 6), shuffledCards.slice(6, 8)]);\n    setMiddleCards(shuffledCards.slice(8, 11));\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex w-full flex-col justify-center items-center bg-[url('../../public/bg.png')]\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex space-x-2 mb-4\",\n      children: playerCards.map((card, index) => /*#__PURE__*/_jsxDEV(Card, {\n        title: card\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex space-x-2 mb-4\",\n      children: middleCards.map((card, index) => /*#__PURE__*/_jsxDEV(Card, {\n        title: card\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }, this), botCards.map((bot, botIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex space-x-2 mb-4\",\n      children: bot.map((card, index) => /*#__PURE__*/_jsxDEV(Card, {\n        title: \"bg\"\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 25\n      }, this))\n    }, botIndex, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 17\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 9\n  }, this);\n};\n_s(Table, \"aY8Ef0sRHsav66Fwt8rJdLTQdMQ=\");\n_c = Table;\nexport default Table;\nvar _c;\n$RefreshReg$(_c, \"Table\");","map":{"version":3,"names":["useEffect","useState","Card","jsxDEV","_jsxDEV","Table","_s","cards","playerCards","setPlayerCards","botCards","setBotCards","middleCards","setMiddleCards","shuffledCards","sort","Math","random","slice","className","children","map","card","index","title","fileName","_jsxFileName","lineNumber","columnNumber","bot","botIndex","_c","$RefreshReg$"],"sources":["/Users/draskeer/Documents/Cours/JS/poker-game/src/components/Table.tsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport Card from \"./Card\"; // Assurez-vous que le chemin vers le composant Card est correct\n\nconst Table = () => {\n    const cards = [\"C01\", \"C02\", \"C03\", \"C04\", \"C05\", \"C06\", \"C07\", \"C08\", \"C09\", \"C10\", \"CC1J\", \"CC2Q\", \"CC3K\", \"D01\", \"D02\", \"D03\", \"D04\", \"D05\", \"D06\", \"D07\", \"D08\", \"D09\", \"D10\", \"DC1J\", \"DC2Q\", \"DC3K\", \"H01\", \"H02\", \"H03\", \"H04\", \"H05\", \"H06\", \"H07\", \"H08\", \"H09\", \"H10\", \"HC1J\", \"HC2Q\", \"HC3K\", \"S01\", \"S02\", \"S03\", \"S04\", \"S05\", \"S06\", \"S07\", \"S08\", \"S09\", \"S10\", \"SC1J\", \"SC2Q\", \"SC3K\"];\n\n    const [playerCards, setPlayerCards] = useState<string[]>([]);\n    const [botCards, setBotCards] = useState<string[][]>([[], [], []]);\n    const [middleCards, setMiddleCards] = useState<string[]>([]);\n\n    useEffect(() => {\n        const shuffledCards = [...cards].sort(() => Math.random() - 0.5);\n        setPlayerCards(shuffledCards.slice(0, 2));\n        setBotCards([\n            shuffledCards.slice(2, 4),\n            shuffledCards.slice(4, 6),\n            shuffledCards.slice(6, 8),\n        ]);\n        setMiddleCards(shuffledCards.slice(8, 11));\n    }, []);\n\n    return (\n        <div className=\"flex w-full flex-col justify-center items-center bg-[url('../../public/bg.png')]\">\n            <div className=\"flex space-x-2 mb-4\">\n                {playerCards.map((card, index) => (\n                    <Card key={index} title={card} />\n                ))}\n            </div>\n\n            <div className=\"flex space-x-2 mb-4\">\n                {middleCards.map((card, index) => (\n                    <Card key={index} title={card} />\n                ))}\n            </div>\n\n\n            {botCards.map((bot, botIndex) => (\n                <div key={botIndex} className=\"flex space-x-2 mb-4\">\n                    {bot.map((card, index) => (\n                        <Card key={index} title={\"bg\"} />\n                    ))}\n                </div>\n            ))}\n        </div>\n    );\n};\n\nexport default Table;"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,OAAOC,IAAI,MAAM,QAAQ,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE3B,MAAMC,KAAK,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChtY,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGR,QAAQ,CAAW,EAAE,CAAC;EAC5D,MAAM,CAACS,QAAQ,EAAEC,WAAW,CAAC,GAAGV,QAAQ,CAAa,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;EAClE,MAAM,CAACW,WAAW,EAAEC,cAAc,CAAC,GAAGZ,QAAQ,CAAW,EAAE,CAAC;EAE5DD,SAAS,CAAC,MAAM;IACZ,MAAMc,aAAa,GAAG,CAAC,GAAGP,KAAK,CAAC,CAACQ,IAAI,CAAC,MAAMC,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,CAAC;IAChER,cAAc,CAACK,aAAa,CAACI,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACzCP,WAAW,CAAC,CACRG,aAAa,CAACI,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,EACzBJ,aAAa,CAACI,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,EACzBJ,aAAa,CAACI,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAC5B,CAAC;IACFL,cAAc,CAACC,aAAa,CAACI,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;EAC9C,CAAC,EAAE,EAAE,CAAC;EAEN,oBACId,OAAA;IAAKe,SAAS,EAAC,kFAAkF;IAAAC,QAAA,gBAC7FhB,OAAA;MAAKe,SAAS,EAAC,qBAAqB;MAAAC,QAAA,EAC/BZ,WAAW,CAACa,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,kBACzBnB,OAAA,CAACF,IAAI;QAAasB,KAAK,EAAEF;MAAK,GAAnBC,KAAK;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAgB,CACnC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CAAC,eAENxB,OAAA;MAAKe,SAAS,EAAC,qBAAqB;MAAAC,QAAA,EAC/BR,WAAW,CAACS,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,kBACzBnB,OAAA,CAACF,IAAI;QAAasB,KAAK,EAAEF;MAAK,GAAnBC,KAAK;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAgB,CACnC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CAAC,EAGLlB,QAAQ,CAACW,GAAG,CAAC,CAACQ,GAAG,EAAEC,QAAQ,kBACxB1B,OAAA;MAAoBe,SAAS,EAAC,qBAAqB;MAAAC,QAAA,EAC9CS,GAAG,CAACR,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,kBACjBnB,OAAA,CAACF,IAAI;QAAasB,KAAK,EAAE;MAAK,GAAnBD,KAAK;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAgB,CACnC;IAAC,GAHIE,QAAQ;MAAAL,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAIb,CACR,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEd,CAAC;AAACtB,EAAA,CA1CID,KAAK;AAAA0B,EAAA,GAAL1B,KAAK;AA4CX,eAAeA,KAAK;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}